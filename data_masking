#!/bin/bash

# data_masking - PostgreSQL Data Masking for Sensitive Information
# Masks sensitive data in SQL dumps (email, phone, credit card, etc.)

# Data masking settings
DATA_MASKING_ENABLED=false
DATA_MASKING_RULES_FILE=""  # JSON file with masking rules

# Color codes
MASK_GREEN='\033[0;32m'
MASK_YELLOW='\033[1;33m'
MASK_BLUE='\033[0;34m'
MASK_RED='\033[0;31m'
MASK_NC='\033[0m'

# Function to mask email addresses
mask_email() {
    local email=$1
    # user@example.com -> u***@e***.com
    echo "$email" | sed -E "s/([^@]{1})[^@]*@([^.]{1})[^.]*\./\1***@\2***./g"
}

# Function to mask phone numbers
mask_phone() {
    local phone=$1
    # +1234567890 -> +12****7890
    echo "$phone" | sed -E "s/(\+?[0-9]{2})[0-9]*([0-9]{4})/\1****\2/g"
}

# Function to mask credit card numbers
mask_credit_card() {
    local cc=$1
    # 1234567890123456 -> 1234********3456
    echo "$cc" | sed -E "s/([0-9]{4})[0-9]{8}([0-9]{4})/\1********\2/g"
}

# Function to anonymize (replace with random data)
anonymize_data() {
    local data_type=$1
    case $data_type in
        email)
            echo "user$(openssl rand -hex 4)@example.com"
            ;;
        phone)
            echo "+1555$(openssl rand -hex 3 | tr -dc '0-9' | head -c 7)"
            ;;
        name)
            echo "User_$(openssl rand -hex 4)"
            ;;
        *)
            echo "ANONYMIZED_$(openssl rand -hex 6)"
            ;;
    esac
}

# Function to apply data masking to SQL dump
apply_data_masking() {
    local dump_file=$1
    local masked_file="${dump_file}.masked"

    if [ "$DATA_MASKING_ENABLED" != "true" ]; then
        return 0
    fi

    if [ ! -f "$dump_file" ]; then
        echo -e "${MASK_RED}✗ Dump file not found: $dump_file${MASK_NC}"
        return 1
    fi

    echo ""
    echo -e "${MASK_BLUE}=== Applying Data Masking ===${MASK_NC}"
    echo "Input: $dump_file"
    echo "Output: $masked_file"
    echo ""

    # Check if dump is in custom format (binary)
    if file "$dump_file" | grep -q "PostgreSQL custom database dump"; then
        echo -e "${MASK_YELLOW}⚠ Custom format dump detected - converting to SQL first${MASK_NC}"

        # Convert custom format to SQL
        local sql_file="${dump_file}.sql"
        pg_restore -f "$sql_file" "$dump_file" 2>&1

        if [ $? -ne 0 ]; then
            echo -e "${MASK_RED}✗ Failed to convert dump to SQL${MASK_NC}"
            return 1
        fi

        dump_file="$sql_file"
    fi

    # Apply masking rules from JSON if provided
    if [ -n "$DATA_MASKING_RULES_FILE" ] && [ -f "$DATA_MASKING_RULES_FILE" ]; then
        echo "Applying masking rules from: $DATA_MASKING_RULES_FILE"
        apply_masking_from_json "$dump_file" "$masked_file"
    else
        # Apply default masking patterns
        echo "Applying default masking patterns..."
        apply_default_masking "$dump_file" "$masked_file"
    fi

    if [ $? -eq 0 ]; then
        echo -e "${MASK_GREEN}✓ Data masking completed${MASK_NC}"
        echo "Masked file: $masked_file"

        # Replace original with masked version
        mv "$masked_file" "$dump_file"
        echo -e "${MASK_GREEN}✓ Original file replaced with masked version${MASK_NC}"
        return 0
    else
        echo -e "${MASK_RED}✗ Data masking failed${MASK_NC}"
        return 1
    fi
}

# Function to apply default masking patterns
apply_default_masking() {
    local input_file=$1
    local output_file=$2

    cp "$input_file" "$output_file"

    # Mask common email patterns in SQL INSERT/COPY statements
    echo "  - Masking email addresses..."
    sed -i.bak -E "s/(['\"])([a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})(["\'"])/\1\2***@masked.com\3/g" "$output_file"

    # Mask phone numbers (various formats)
    echo "  - Masking phone numbers..."
    sed -i.bak -E "s/(['\"])(\+?[0-9]{1,3}[-. ]?)?(\(?[0-9]{3}\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4})(["\'"])/\1+1555***\$(openssl rand -hex 2 | tr -dc '0-9' | head -c 4)\3/g" "$output_file"

    # Mask credit card numbers (16 digits)
    echo "  - Masking credit card numbers..."
    sed -i.bak -E "s/(['\"])([0-9]{4})[0-9]{8}([0-9]{4})(["\'"])/\1\2********\3\4/g" "$output_file"

    # Mask SSN-like patterns (XXX-XX-XXXX)
    echo "  - Masking SSN patterns..."
    sed -i.bak -E "s/(['\"])([0-9]{3}-[0-9]{2}-[0-9]{4})(["\'"])/\1***-**-****\3/g" "$output_file"

    # Remove backup file
    rm -f "${output_file}.bak"

    echo -e "${MASK_GREEN}  ✓ Default masking applied${MASK_NC}"
    return 0
}

# Function to apply masking from JSON rules file
apply_masking_from_json() {
    local input_file=$1
    local output_file=$2

    if ! command -v jq &> /dev/null; then
        echo -e "${MASK_RED}✗ jq is required for JSON masking rules${MASK_NC}"
        return 1
    fi

    cp "$input_file" "$output_file"

    # Example JSON structure:
    # {
    #   "rules": [
    #     {"table": "users", "column": "email", "method": "email_mask"},
    #     {"table": "users", "column": "phone", "method": "phone_mask"},
    #     {"table": "customers", "column": "credit_card", "method": "anonymize"}
    #   ]
    # }

    local rules_count=$(jq '.rules | length' "$DATA_MASKING_RULES_FILE" 2>/dev/null)

    if [ -z "$rules_count" ] || [ "$rules_count" = "0" ]; then
        echo -e "${MASK_YELLOW}⚠ No masking rules found in JSON file${MASK_NC}"
        return 1
    fi

    echo "Processing $rules_count masking rule(s)..."

    for i in $(seq 0 $((rules_count - 1))); do
        local table=$(jq -r ".rules[$i].table" "$DATA_MASKING_RULES_FILE")
        local column=$(jq -r ".rules[$i].column" "$DATA_MASKING_RULES_FILE")
        local method=$(jq -r ".rules[$i].method" "$DATA_MASKING_RULES_FILE")

        echo "  - Rule $((i+1)): $table.$column ($method)"

        case $method in
            email_mask)
                # Simplified email masking in SQL
                sed -i.bak -E "s/(-- Data for Name: $table.*$column.*)[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/\1user***@masked.com/g" "$output_file"
                ;;
            phone_mask)
                sed -i.bak -E "s/(-- Data for Name: $table.*$column.*)\+?[0-9 -()]+/\1+1555****0000/g" "$output_file"
                ;;
            credit_card_mask)
                sed -i.bak -E "s/(-- Data for Name: $table.*$column.*)([0-9]{4})[0-9]{8}([0-9]{4})/\1\2********\3/g" "$output_file"
                ;;
            anonymize)
                # Replace with random data
                sed -i.bak -E "s/(-- Data for Name: $table.*$column.*)[^,\t\n]+/\1ANONYMIZED_DATA/g" "$output_file"
                ;;
        esac
    done

    # Remove backup file
    rm -f "${output_file}.bak"

    echo -e "${MASK_GREEN}  ✓ JSON-based masking applied${MASK_NC}"
    return 0
}

# Function to create example masking rules file
create_example_masking_rules() {
    local example_file="$SCRIPT_DIR/masking_rules_example.json"

    cat > "$example_file" <<'EOF'
{
  "rules": [
    {
      "table": "users",
      "column": "email",
      "method": "email_mask",
      "description": "Mask user email addresses"
    },
    {
      "table": "users",
      "column": "phone",
      "method": "phone_mask",
      "description": "Mask user phone numbers"
    },
    {
      "table": "customers",
      "column": "credit_card",
      "method": "credit_card_mask",
      "description": "Mask credit card numbers"
    },
    {
      "table": "employees",
      "column": "ssn",
      "method": "anonymize",
      "description": "Anonymize social security numbers"
    }
  ]
}
EOF

    echo -e "${MASK_GREEN}✓ Example masking rules created: $example_file${MASK_NC}"
}
